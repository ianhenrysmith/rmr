* commits should work like code
  * keep stories to a commit
  
* use 'git merge --squash' to squash a branch into a single commit
  * this will STAGE the diff
  * after merge, use 'git branch -D <branch name>' to hard-delete a branch
  
* 'git reset HEAD^' will get rid of your latest commit
  
* restoring deleted branch
  * go to 'git reflog' to see HEAD history
  * create new branch at HEAD position before branch was deleted
  * 'git branch <branch name> HEAD@{5}' ----- or any MD5/HEAD nickname
  
* stash
  * 'git stash apply' will apply the changes at the top of the stash, but not pop the changeset from the top of the stash
    * useful if you have to patch multiple branches
    
* rebasing
  * only do a rebase on a topic branch!
  * will base all of your commits off of HEAD@master
  * steps:
    1) 'git rebase master'
    2) <do the rebase>
    3) 'git checkout master'
    4) 'git merge <topic>'
    5) happy history :)
  * 'git merge -noff <topic>' will keep a bubble, not do straight line history
  * with squash:
    1) 'git checkout <topic>'
    2) 'git rebase -i MD5' OR 'git rebase -i master'
    3) 

* fetch
  * 'git fetch' --- will get all branches, but not apply them
  * 'git branch -a' --- will show all branches, including remotes
  
* branches
  * remote branches go to detached head state
  * 'git branch -vv' shows head state of each branch
